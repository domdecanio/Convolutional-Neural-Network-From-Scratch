# -*- coding: utf-8 -*-
"""DS_4002_wk2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKRlxdiaKaXak0YypAm8fgQYM4sbwVf9

Importing data and packages

# Configuring Workspace
"""

from google.colab import drive
drive.mount("/content/drive")

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os
from tensorflow import keras
from functools import partial
from sklearn.model_selection import cross_val_score
from sklearn.metrics import ConfusionMatrixDisplay

"""## Create Datasets"""

train_dir = "/content/drive/MyDrive/archive/seg_test/seg_test"
val_dir = "/content/drive/MyDrive/archive/seg_test/seg_test2/seg_test2"

label_dict = {0:"buildings", 1:"forest", 2:"glacier", 3:"mountain",
          4:"sea", 5:"street"}
label_lst = ["buildings", "forest", "glacier", "mountain", "sea", "street"]

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    train_dir,
    labels="inferred",
    class_names=label_lst,
    image_size=(150, 150),
    batch_size=32,
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    val_dir,
    labels="inferred",
    class_names=label_lst,
    image_size=(150, 150),
    batch_size=32,
)

# Configuring data for performance
train_ds = train_ds.prefetch(buffer_size=32)
val_ds = val_ds.prefetch(buffer_size=32)

# Viewing data
plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(int(labels[i]))
        plt.axis("off")

#train_data = ImageDataBunch.from_folder('/content/drive/MyDrive/archive', 
#                                        train=train_dir, valid=val_dir,
#                                        ds_tfms=get_transforms(), size=150,
#                                        num_workers=2).normalize(imagenet_stats)

#data.show_batch(rows=3, figsize=(7,6),recompute_scale_factor=True)

"""# Simple CNN from Textbook

## Model Creation
"""

DefaultConv2D = partial(keras.layers.Conv2D, kernel_size=3, activation='relu', padding="SAME")

model = keras.models.Sequential([
    DefaultConv2D(filters=64, kernel_size=5, input_shape=[150, 150, 3]),
    keras.layers.MaxPooling2D(pool_size=2),
    DefaultConv2D(filters=128),
    DefaultConv2D(filters=128),
    keras.layers.MaxPooling2D(pool_size=2),
    DefaultConv2D(filters=256),
    DefaultConv2D(filters=256),
    keras.layers.MaxPooling2D(pool_size=2),
    keras.layers.Flatten(),
    keras.layers.Dense(units=128, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(units=64, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(units=10, activation='softmax')
])

"""## Master Run Script"""

def master_run(epochs = 2, model_name="Simple_CNN"):
  image_size = (180, 180)
  batch_size = 32
  
  # initialize model
  os.chdir("/content/drive/My Drive/Colab Notebooks")

  callbacks = [
      keras.callbacks.ModelCheckpoint(model_name + f'_at_{epochs}.h5')
  ]
  
  model.compile(
      optimizer=tf.keras.optimizers.Adam(1e-3),
      loss="sparse_categorical_crossentropy",
      metrics=["accuracy"],
  )

  model.fit(
      x=train_ds, 
      y=None,
      epochs=epochs, 
      callbacks=callbacks, 
      validation_data=val_ds,
  )

"""## Run Code

"""

master_run(epochs=20)

"""## Model Test"""

# Dictionary to convert labels from int to str
label_dict = {0:"buildings", 1:"forest", 2:"glacier", 3:"mountain",
          4:"sea", 5:"street"}

# Load the last model
last_model = keras.models.load_model("Simple_CNN_at_5.h5")

# Generate predictions and true values
preds_lst = []
true_lst = []
for image in val_ds:
  prediction = np.argmax(last_model.predict(image[0]), axis=-1)
  prediction = np.array(prediction).tolist()
  preds_lst = preds_lst + prediction

  true_label = image[1]
  true_label = np.array(true_label).tolist()
  true_lst = true_lst + true_label


# Mapping labels
preds_lst = list(map(label_dict.get, preds_lst))
true_lst = list(map(label_dict.get, true_lst))


# Generate confusion matrix
ConfusionMatrixDisplay.from_predictions(true_lst, preds_lst, cmap="Blues")
plt.show()

"""# Simple CNN with Depth Pooling

## Model Creation
"""

DefaultConv2D = partial(keras.layers.Conv2D, kernel_size=3, 
                        activation='relu', padding="SAME")

Depth_Pool1 = keras.layers.Lambda(
    lambda X: tf.math.reduce_max(X, 
                            axis=[3], 
                            keepdims=True))

Depth_Pool2 = keras.layers.Lambda(
    lambda X: tf.math.reduce_max(X, 
                            axis=[3], 
                            keepdims=True))

model2 = keras.models.Sequential([
    DefaultConv2D(filters=64, kernel_size=5, input_shape=[150, 150, 3]),
    keras.layers.MaxPooling2D(pool_size=2, padding="SAME"),
    DefaultConv2D(filters=128),
    DefaultConv2D(filters=128),
    keras.layers.MaxPooling2D(pool_size=2, padding="SAME"),
    Depth_Pool1,

    DefaultConv2D(filters=256),
    DefaultConv2D(filters=256),
    keras.layers.MaxPooling2D(pool_size=2, padding="SAME"),
    Depth_Pool2,

    keras.layers.Flatten(),
    keras.layers.Dense(units=128, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(units=64, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(units=10, activation='softmax')
])

"""## Master Run Script"""

def master_run2(epochs = 2, model_name="Simple_CNN_W_DepthP"):
  image_size = (180, 180)
  batch_size = 32
  
  # initialize model
  os.chdir("/content/drive/My Drive/Colab Notebooks")

  callbacks = [
      keras.callbacks.ModelCheckpoint(model_name + f'_at_{epochs}.h5')
  ]
  
  model2.compile(
      optimizer=tf.keras.optimizers.Adam(1e-3),
      loss="sparse_categorical_crossentropy",
      metrics=["accuracy"],
  )

  model2.fit(
      x=train_ds, 
      y=None,
      epochs=epochs, 
      callbacks=callbacks, 
      validation_data=val_ds,
  )

"""## Run Code"""

master_run2(epochs=20)

"""## Model Test"""

# Dictionary to convert labels from int to str
label_dict = {0:"buildings", 1:"forest", 2:"glacier", 3:"mountain",
          4:"sea", 5:"street"}

# Load the last model
last_model = keras.models.load_model("Simple_CNN_at_20.h5")

# Generate predictions and true values
preds_lst = []
true_lst = []
for image in val_ds:
  prediction = np.argmax(last_model.predict(image[0]), axis=-1)
  prediction = np.array(prediction).tolist()
  preds_lst = preds_lst + prediction

  true_label = image[1]
  true_label = np.array(true_label).tolist()
  true_lst = true_lst + true_label


# Mapping labels
preds_lst = list(map(label_dict.get, preds_lst))
true_lst = list(map(label_dict.get, true_lst))


# Generate confusion matrix
ConfusionMatrixDisplay.from_predictions(true_lst, preds_lst, cmap="Blues")
plt.show()